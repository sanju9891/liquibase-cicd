name: Liquibase CI/CD Pipeline

on:
  # Trigger the workflow on pushes to the main branch
  # and on pull requests to the main branch.
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # You can also add a workflow_dispatch event to manually trigger the workflow
  # workflow_dispatch:

env:
  LIQUIBASE_VERSION: 4.27.0 # Use a specific, recent version for consistency

jobs:
  # Job 1: Build and Validate
  # This job runs once, validates the changelog, and creates a single artifact
  validate_and_build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven dependencies
        # This step caches the Maven repository to speed up builds
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Validate Liquibase changelog
        # This step uses the Maven plugin to perform a "validate" command.
        # It ensures the changelog files are correctly formatted before deployment.
        # Replace the changelog and properties file paths with your own.
        # run: mvn liquibase:validate -Dliquibase.changeLogFile=src/main/resources/db/changelog/db.changelog-master.xml -Dliquibase.propertyFile=src/main/resources/liquibase.properties
        run: mvn liquibase:validate -Dliquibase.changeLogFile=liquibase_files/changelog.xml -Dliquibase.propertyFile=config/dev/dev.liquibase.properties

      - name: Create deployment artifact directory
        # We create a directory to bundle all necessary files for deployment.
        run: mkdir liquibase-deployment-bundle
      
      - name: Copy deployment files to artifact directory
        # We copy all the files required for deployment (pom.xml, changelogs, etc.).
        # The pom.xml is essential because it contains the plugin configuration.
        run: |
          cp pom.xml liquibase-deployment-bundle/
          # cp -r liquibase_files/ liquibase-deployment-bundle/
          # If you have custom JDBC drivers, copy them here as well
          # cp lib/mysql-connector-j-8.0.33.jar liquibase-deployment-bundle/

      - name: Upload deployment bundle artifact
        # This step uploads the bundled files as a single artifact.
        # The next job will download this artifact, ensuring that the same
        # files are used for validation and deployment.
        uses: actions/upload-artifact@v4
        with:
          name: liquibase-deployment-bundle
          path: liquibase-deployment-bundle/
          retention-days: 7
          
  # Job 2: Deploy to Development Environment
  deploy_to_dev:
    runs-on: ubuntu-latest
    # This job must wait for the validation job to finish successfully
    needs: validate_and_build
    # Use a GitHub Environment for secure secrets management
    environment: dev
    steps:
      - name: Set up JDK 17
        # This is a new job, so we need to set up the environment again
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven dependencies
        # Re-cache dependencies for this job
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Download changelog artifact
        # Download the artifact created in the previous job
        uses: actions/download-artifact@v4
        with:
          name: liquibase-deployment-bundle
          path: .

      - name: Run Liquibase update on Dev database
        # This step securely uses the database credentials from GitHub secrets
        # and performs the update command.
        run: |
          mvn liquibase:update \
            -Dliquibase.changeLogFile=./liquibase_files/changelog.xml \
            -Dliquibase.url="${{ secrets.DEV_DB_URL }}" \
            -Dliquibase.username="${{ secrets.DEV_DB_USERNAME }}" \
            -Dliquibase.password="${{ secrets.DEV_DB_PASSWORD }}"
