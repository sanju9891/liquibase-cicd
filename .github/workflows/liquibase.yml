name: Liquibase CI-CD with Maven & SonarCloud

on:
  push:
    branches:
      - main
      - release/*
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - staging
          - production

jobs:
  build-and-scan:
    name: Build & SonarCloud Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build, Test and Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify sonar:sonar

  deploy-dev:
    name: Deploy to Dev
    needs: build-and-scan
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Deploy to Dev with Maven
        env:
          LIQUIBASE_URL: ${{ secrets.LIQUIBASE_URL }}
          LIQUIBASE_USERNAME: ${{ secrets.LIQUIBASE_USERNAME }}
          LIQUIBASE_PASSWORD: ${{ secrets.LIQUIBASE_PASSWORD }}
        run: mvn liquibase:update -P dev

  deploy-staging:
    name: Deploy to Staging
    needs: build-and-scan
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release/')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Deploy to Staging with Maven
        env:
          LIQUIBASE_URL: ${{ secrets.LIQUIBASE_URL }}
          LIQUIBASE_USERNAME: ${{ secrets.LIQUIBASE_USERNAME }}
          LIQUIBASE_PASSWORD: ${{ secrets.LIQUIBASE_PASSWORD }}
        run: mvn liquibase:update -P staging

  deploy-production:
    name: Deploy to Production
    needs: build-and-scan
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: 'https://your-app-url.com'
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Run liquibase updateSQL (Dry Run)
        id: dry-run
        env:
          LIQUIBASE_URL: ${{ secrets.LIQUIBASE_URL }}
          LIQUIBASE_USERNAME: ${{ secrets.LIQUIBASE_USERNAME }}
          LIQUIBASE_PASSWORD: ${{ secrets.LIQUIBASE_PASSWORD }}
        run: |
          mvn liquibase:updateSQL -P production > target/production-deployment.sql
      - name: Upload SQL artifact
        uses: actions/upload-artifact@v3
        with:
          name: production-deployment-sql
          path: target/production-deployment.sql
      - name: Deploy to Production with Maven
        env:
          LIQUIBASE_URL: ${{ secrets.LIQUIBASE_URL }}
          LIQUIBASE_USERNAME: ${{ secrets.LIQUIBASE_USERNAME }}
          LIQUIBASE_PASSWORD: ${{ secrets.LIQUIBASE_PASSWORD }}
        run: mvn liquibase:update -P production
