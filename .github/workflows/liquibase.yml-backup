# name: Liquibase CI-CD with Maven & SonarCloud

# on:
#   push:
#     branches:
#       - main
#       - release/*
#   pull_request:
#     branches:
#       - main
#   workflow_dispatch:
#     inputs:
#       environment:
#         description: 'Environment to deploy to'
#         required: true
#         type: choice
#         options:
#           - dev
#           - staging
#           - production

# jobs:
#   build-and-scan:
#     name: Build & SonarCloud Scan
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

#       - name: Set up JDK 11
#         uses: actions/setup-java@v3
#         with:
#           java-version: '11'
#           distribution: 'temurin'

#       - name: Cache SonarCloud packages
#         uses: actions/cache@v3
#         with:
#           path: ~/.sonar/cache
#           key: ${{ runner.os }}-sonar
#           restore-keys: ${{ runner.os }}-sonar

#       - name: Cache Maven packages
#         uses: actions/cache@v3
#         with:
#           path: ~/.m2/repository
#           key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-maven-

#       - name: Build, Test and Scan
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#         run: mvn -B verify sonar:sonar

#   deploy-dev:
#     name: Deploy to Dev
#     needs: build-and-scan
#     if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#     runs-on: ubuntu-latest
#     environment: dev
#     steps:
#       - uses: actions/checkout@v3
#       - name: Set up JDK 11
#         uses: actions/setup-java@v3
#         with:
#           java-version: '11'
#           distribution: 'temurin'
#       - name: Deploy to Dev with Maven
#         env:
#           LIQUIBASE_URL: ${{ secrets.LIQUIBASE_URL }}
#           LIQUIBASE_USERNAME: ${{ secrets.LIQUIBASE_USERNAME }}
#           LIQUIBASE_PASSWORD: ${{ secrets.LIQUIBASE_PASSWORD }}
#         run: mvn liquibase:update -P dev

#   deploy-staging:
#     name: Deploy to Staging
#     needs: build-and-scan
#     if: (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release/')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
#     runs-on: ubuntu-latest
#     environment: staging
#     steps:
#       - uses: actions/checkout@v3
#       - name: Set up JDK 11
#         uses: actions/setup-java@v3
#         with:
#           java-version: '11'
#           distribution: 'temurin'
#       - name: Deploy to Staging with Maven
#         env:
#           LIQUIBASE_URL: ${{ secrets.LIQUIBASE_URL }}
#           LIQUIBASE_USERNAME: ${{ secrets.LIQUIBASE_USERNAME }}
#           LIQUIBASE_PASSWORD: ${{ secrets.LIQUIBASE_PASSWORD }}
#         run: mvn liquibase:update -P staging

#   deploy-production:
#     name: Deploy to Production
#     needs: build-and-scan
#     if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
#     runs-on: ubuntu-latest
#     environment:
#       name: production
#       url: 'https://your-app-url.com'
#     steps:
#       - uses: actions/checkout@v3
#       - name: Set up JDK 11
#         uses: actions/setup-java@v3
#         with:
#           java-version: '11'
#           distribution: 'temurin'
#       - name: Run liquibase updateSQL (Dry Run)
#         id: dry-run
#         env:
#           LIQUIBASE_URL: ${{ secrets.LIQUIBASE_URL }}
#           LIQUIBASE_USERNAME: ${{ secrets.LIQUIBASE_USERNAME }}
#           LIQUIBASE_PASSWORD: ${{ secrets.LIQUIBASE_PASSWORD }}
#         run: |
#           mvn liquibase:updateSQL -P production > target/production-deployment.sql
#       - name: Upload SQL artifact
#         uses: actions/upload-artifact@v3
#         with:
#           name: production-deployment-sql
#           path: target/production-deployment.sql
#       - name: Deploy to Production with Maven
#         env:
#           LIQUIBASE_URL: ${{ secrets.LIQUIBASE_URL }}
#           LIQUIBASE_USERNAME: ${{ secrets.LIQUIBASE_USERNAME }}
#           LIQUIBASE_PASSWORD: ${{ secrets.LIQUIBASE_PASSWORD }}
#         run: mvn liquibase:update -P production



name: Liquibase CI Pipeline
 
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
 
jobs:
  liquibase-ci:
    runs-on: ubuntu-latest
 
    env:
      LIQUIBASE_VERSION: 4.24.0
      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      CHANGELOG_FILE: changelog.xml
 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
 
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
 
      - name: Install Liquibase
        run: |
          curl -L https://github.com/liquibase/liquibase/releases/download/v${LIQUIBASE_VERSION}/liquibase-${LIQUIBASE_VERSION}.tar.gz | tar xz
          sudo mv liquibase /usr/local/bin/liquibase
 
      - name: Validate Changelog
        run: liquibase --url=$DB_URL --username=$DB_USERNAME --password=$DB_PASSWORD --changeLogFile=$CHANGELOG_FILE validate
 
      - name: Dry Run Update SQL
        run: liquibase --url=$DB_URL --username=$DB_USERNAME --password=$DB_PASSWORD --changeLogFile=$CHANGELOG_FILE updateSQL
 
      - name: Update Database (Non-Prod)
        if: github.ref == 'refs/heads/main'
        run: liquibase --url=$DB_URL --username=$DB_USERNAME --password=$DB_PASSWORD --changeLogFile=$CHANGELOG_FILE update
 
      - name: Tag Release (Optional)
        if: github.ref == 'refs/heads/main'
        run: |
          git tag "liquibase-release-$(date +'%Y%m%d%H%M%S')"
          git push origin --tags
 
      - name: Notify Slack (Optional)
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: '{"text":"Liquibase update completed successfully!"}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}