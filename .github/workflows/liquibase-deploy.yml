name: Database Migration Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  LIQUIBASE_VERSION: 4.20.0

jobs:
  # Stage 1: Build and Test in Dev Environment
  dev-migration:
    runs-on: ubuntu-latest
    outputs:
      migration-needed: ${{ steps.check-changes.outputs.changes }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Install Liquibase
      run: |
        wget https://github.com/liquibase/liquibase/releases/download/v${{ env.LIQUIBASE_VERSION }}/liquibase-${{ env.LIQUIBASE_VERSION }}.tar.gz
        mkdir -p liquibase
        tar -xzf liquibase-${{ env.LIQUIBASE_VERSION }}.tar.gz -C liquibase
        chmod +x liquibase/liquibase
        echo "view installation directory"
        pwd
        ls -ltra
        liquibase/liquibase --version

    - name: Copy environment properties
      run: |
        cp config/dev/dev.liquibase.properties liquibase_files/liquibase.properties
        pwd
        ls -ltra

    - name: Run Liquibase validate
      run: |
        liquibase/liquibase --defaultsFile=config/dev/dev.liquibase.properties --changeLogFile=liquibase_files/changelog.xml validate      
  
    # - name: Download MySQL JDBC Driver
    #   run: |
    #     wget https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.33/mysql-connector-java-8.0.33.jar -P liquibase/lib/

    # - name: Validate changelog
    #   run: |
    #     ./liquibase/liquibase --defaultsFile=config/dev.liquibase.properties validate

#     liquibase --defaultsFile=liquibase.properties --classpath=/usr/share/java/mysql-connector-java-8.0.33.jar update














# ############
# ####Airtel
# #############


# name: Liquibase Deployment Pipeline

# on:
#   push:
#     branches: [ "main" ]
#   workflow_dispatch:

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       # 1. Checkout the project repository
#       - uses: actions/checkout@v4

#       # 2. Run unit tests (optional)
#       - name: Run Tests
#         run: ./mvn test

#       # 3. Package Java app (if needed)
#       - name: Build JAR
#         run: ./mvn package

#       # 4. Upload Liquibase folder as an artifact
#       - name: Upload Liquibase Changelogs
#         uses: actions/upload-artifact@v4
#         with:
#           name: liquibase-changelogs
#           path: src/main/resources/db/changelog/

#       # 5. Upload package JAR as artifact (optional)
#       - name: Upload JAR
#         uses: actions/upload-artifact@v4
#         with:
#           name: app-jar
#           path: target/myapp-*.jar

#   deploy:
#     needs: build
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         env: [ dev, staging, prod ]

#     environment:
#       name: ${{ matrix.env }}

#     steps:
#       # 6. Checkout again for deployment context
#       - uses: actions/checkout@v4

#       # 7. Download changelogs artifact
#       - name: Download Changelogs
#         uses: actions/download-artifact@v4
#         with:
#           name: liquibase-changelogs
#           path: db/changelog/

#       # 8. Download app jar (optional)
#       - name: Download Jar
#         uses: actions/download-artifact@v4
#         with:
#           name: app-jar
#           path: target/

      # # 9. Run Liquibase migration (secrets per environment)
      # - name: Liquibase Update
      #   uses: liquibase/liquibase-github-action@v4
      #   with:
      #     operation: update
      #     changelogFile: db/changelog/db.changelog-master.xml
      #     url: ${{ secrets["DB_${{ matrix.env | upper }}_URL"] }}
      #     username: ${{ secrets["DB_${{ matrix.env | upper }}_USER"] }}
      #     password: ${{ secrets["DB_${{ matrix.env | upper }}_PASSWORD"] }}
      #     classpath: 'target/myapp-*.jar' # Only if needed for DB drivers









# name: Liquibase Multi-Env CI
 
# on:
#   workflow_dispatch:
#     inputs:
#       environment:
#         description: 'Target Environment'
#         required: true
#         default: 'dev'
#         type: choice
#         options:
#           - dev
#           - sit
#           - uat
 
# jobs:
#   liquibase-deploy:
#     runs-on: self-hosted
 
#     env:
#       LIQUIBASE_VERSION: 4.31.1 #4.24.0
#       ENV: ${{ github.event.inputs.environment }}
 
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up JDK
#         uses: actions/setup-java@v2
#         with:
#           java-version: '11'  # Specify the Java version
#           distribution: 'adopt'

#       - name: Install Liquibase
#         run: |
#           curl -Lo liquibase.zip https://github.com/liquibase/liquibase/releases/latest/download/liquibase-4.10.0.zip
#           echo "Liquibase installed successfully."
#           ls -lah
#           unzip liquibase.zip -d liquibase
       



# name: Liquibase Deploy
# 'on':
#   workflow_dispatch:
#     inputs:
#       environment:
#         description: 'Target environment (dev, sit, uat)'
#         required: true
#         default: dev
#         type: choice
#         options:
#           - dev
#           - sit
#           - uat
# jobs:
#   liquibase-deploy:
#     runs-on: ubuntu-latest
#     env:
#       LIQUIBASE_VERSION: 4.28.0
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
#     #   - name: Download Liquibase
#     #     run: |
#     #       liquibase --version
#       - name: Copy environment properties
#         run: >
#           cp config/dev/${{ github.event.inputs.environment
#           }}.liquibase.properties liquibase_files/liquibase.properties
#       - name: Run Liquibase update
#         run: >      

#           liquibase --defaultsFile=liquibase.properties
#           --changeLogFile=liquibase_files/changelog.xml update






# name: Liquibase Deploy

# on:
#   workflow_dispatch:
#     inputs:
#       environment:
#         description: 'Target environment (dev, sit, uat)'
#         required: true
#         default: 'dev'
#         type: choice
#         options:
#           - dev
#           - sit
#           - uat

# jobs:
#   liquibase-deploy:
#     runs-on: ubuntu-latest
#     env:
#       LIQUIBASE_VERSION: '4.28.0'
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
# jobs:
#   liquibase-deploy:
#     # runs-on: self-hosted
#     runs-on: ubuntu-latest
#     env:
#       LIQUIBASE_VERSION: '4.28.0'
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
 
#       - name: Copy environment properties
#         run: |
#           cp config/dev/${{ github.event.inputs.environment }}.liquibase.properties liquibase_files/liquibase.properties
      
#       - name: Setup SSH
#         uses: webfactory/ssh-agent@v0.9.0
#         with:
#           ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

#       # - name: Add known hosts
#       #   run: |
#       #     ssh-keyscan -H ${{ secrets.REMOTE_VM_PUBLIC_IP }} >> ~/.ssh/known_hosts

#       - name: Run date command on remote VM
#         run: |
#           # IMPORTANT: Replace REMOTE_VM_PUBLIC_IP with the actual public IP/hostname.
#           # You should store this as a GitHub Secret!
#           ssh -vvv -o StrictHostKeyChecking=no -o ConnectTimeout=60 ubuntu@192.168.0.102 "date"
#         env:
#           SSH_AUTH_SOCK: /tmp/ssh_agent.sock

      
#       - name: Connect and Run Liquibase test
#         run: |          
#           ssh -o StrictHostKeyChecking=no -o ConnectTimeout=300 ubuntu@192.168.0.102 "liquibase --search-path=/home/ubuntu/liquibase-base-multi-env --defaultsFile=/home/ubuntu/liquibase-base-multi-env/liquibase.properties --changeLogFile=db/changelog.xml --classpath=/usr/share/java/mysql-connector-java-8.0.33.jar update"
#         env:
#           SSH_AUTH_SOCK: /tmp/ssh_agent.sock # Ensure the agent is used
          
      # ssh -vvv -o StrictHostKeyChecking=no -o ConnectTimeout=60 ubuntu@${{ secrets.REMOTE_VM_PUBLIC_IP }} "liquibase --search-path=/home/ubuntu/liquibase-base-multi-env --defaultsFile=/home/ubuntu/liquibase-base-multi-env/liquibase.properties --changeLogFile=db/changelog.xml --classpath=/usr/share/java/mysql-connector-java-8.0.33.jar update"
      # - name: Copy environment properties
      #   run: |
      #     cp config/dev/${{ github.event.inputs.environment }}.liquibase.properties liquibase_files/liquibase.properties

      # - name: Run Liquibase update
      #   run: |
      #     cd liquibase_files
      #     liquibase --defaultsFile=liquibase.properties --changeLogFile=liquibase_files/changelog.xml update

    #   - name: Set up Java
    #     uses: actions/setup-java@v4
    #     with:
    #       distribution: 'temurin'
    #       java-version: '17'

    #   - name: Download Liquibase
    #     run: |
    #     #   curl -L https://github.com/liquibase/liquibase/releases/download/v${LIQUIBASE_VERSION}/liquibase-${LIQUIBASE_VERSION}.tar.gz -o liquibase.tar.gz
    #     #   tar -xzf liquibase.tar.gz
    #     #   sudo mv liquibase /usr/local/bin/liquibase
    #       liquibase --version

    #   - name: Copy environment properties
    #     run: |
    #       cp config/dev/${{ github.event.inputs.environment }}.liquibase.properties liquibase_files/liquibase.properties

    #   - name: Run Liquibase update
    #     run: |
    #       cd liquibase_files
    #       liquibase --defaultsFile=liquibase.properties --changeLogFile=liquibase_files/changelog.xml update
    #   - name: Clean up
    #     run: |  
    #       rm -rf liquibase_files
    #       rm liquibase.tar.gz  
          
###liquibase --defaultsFile=liquibase.properties --classpath=/usr/share/java/mysql-connector-java-8.0.33.jar update

###ssh ubuntu@localhost "liquibase --search-path=/home/ubuntu/liquibase-base-multi-env --defaultsFile=/home/ubuntu/liquibase-base-multi-env/liquibase.properties --changeLogFile=db/changelog.xml --classpath=/usr/share/java/mysql-connector-java-8.0.33.jar update"

